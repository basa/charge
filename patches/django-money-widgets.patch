--- djmoney/forms/widgets.py
+++ djmoney/forms/widgets.py
@@ -37,8 +37,10 @@ def render(self, name, value, attrs=None):
             currency = value[1]
         if isinstance(value, int) or isinstance(value, Decimal):
             amount = value
-        result = super(InputMoneyWidget, self).render(name, amount)
-        result += self.currency_widget.render(name + '_currency', currency)
+        result = super(InputMoneyWidget, self).render(name, amount, attrs)
+        name += '_currency'
+        attrs['id'] = 'id_' + name
+        result += self.currency_widget.render(name, currency, attrs)
         return result
 
     def value_from_datadict(self, data, files, name):
--- djmoney/models/fields.py
+++ djmoney/models/fields.py
@@ -74,6 +74,10 @@ def __init__(self, verbose_name=None, name=None,
 
         if isinstance(default, Money):
             self.default_currency = default.currency
+        else:
+            self.default_currency = default_currency
+            # To ultimately pass default_currency on to widget
+            default=Money(default, default_currency)
 
         # Avoid giving the user hard-to-debug errors if they miss required attributes
         if max_digits is None:
@@ -82,7 +86,6 @@ def __init__(self, verbose_name=None, name=None,
         if decimal_places is None:
             raise Exception("You have to provide a decimal_places attribute to Money fields.")
 
-        self.default_currency = default_currency
         super(MoneyField, self).__init__(verbose_name, name, max_digits, decimal_places, default=default, **kwargs)
 
     def to_python(self, value):
